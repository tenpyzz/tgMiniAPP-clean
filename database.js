import pkg from 'pg';
const { Pool } = pkg;
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import fs from 'fs';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

class Database {
    constructor() {
        // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway
        let databaseUrl = process.env.DATABASE_URL;
        
        console.log('üîç DATABASE_URL –∑–Ω–∞—á–µ–Ω–∏–µ:', databaseUrl ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ' : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        console.log('üîç DATABASE_URL –¥–ª–∏–Ω–∞:', databaseUrl ? databaseUrl.length : 0);
        console.log('üîç DATABASE_URL —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ:', databaseUrl);
        
        // –ï—Å–ª–∏ DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π, –ø–æ–ø—Ä–æ–±—É–µ–º —Å–æ–±—Ä–∞—Ç—å –∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        if (!databaseUrl || databaseUrl.trim() === '' || databaseUrl.includes('${{')) {
            console.log('üîç DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —à–∞–±–ª–æ–Ω, –ø—ã—Ç–∞–µ–º—Å—è —Å–æ–±—Ä–∞—Ç—å –∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö...');
            
            const pgHost = process.env.PGHOST || process.env.POSTGRES_HOST;
            const pgPort = process.env.PGPORT || process.env.POSTGRES_PORT || '5432';
            const pgDatabase = process.env.PGDATABASE || process.env.POSTGRES_DB;
            const pgUser = process.env.PGUSER || process.env.POSTGRES_USER;
            const pgPassword = process.env.PGPASSWORD || process.env.POSTGRES_PASSWORD;
            
            console.log('üîç –û—Ç–¥–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:', {
                pgHost: pgHost ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ' : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ',
                pgPort: pgPort ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ' : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ',
                pgDatabase: pgDatabase ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ' : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ',
                pgUser: pgUser ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ' : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ',
                pgPassword: pgPassword ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ' : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'
            });
            
            if (pgHost && pgDatabase && pgUser && pgPassword) {
                databaseUrl = `postgresql://${pgUser}:${pgPassword}@${pgHost}:${pgPort}/${pgDatabase}`;
                console.log('‚úÖ –°–æ–±—Ä–∞–ª–∏ DATABASE_URL –∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö');
            } else {
                console.error('‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!');
                console.error('–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:', Object.keys(process.env).filter(key => 
                    key.includes('POSTGRES') || key.includes('PG') || key.includes('DATABASE')
                ));
                throw new Error('DATABASE_URL is required');
            }
        }
        
        console.log('üîç DATABASE_URL:', databaseUrl.replace(/:[^:@]+@/, ':***@')); // –°–∫—Ä—ã–≤–∞–µ–º –ø–∞—Ä–æ–ª—å –≤ –ª–æ–≥–∞—Ö
        
        this.pool = new Pool({
            connectionString: databaseUrl,
            ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false,
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è Railway
            connectionTimeoutMillis: 30000,
            idleTimeoutMillis: 30000,
            query_timeout: 30000,
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Railway
            max: 20,
            min: 0,
            acquireTimeoutMillis: 30000
        });
        
        this.isConnected = false;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    async init() {
        const maxRetries = 5;
        const retryDelay = 2000; // 2 —Å–µ–∫—É–Ω–¥—ã
        
        for (let attempt = 1; attempt <= maxRetries; attempt++) {
            try {
                console.log(`üîç  - –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL (${attempt}/${maxRetries})`);
                
                // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                const client = await this.pool.connect();
                console.log('‚úÖ  - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
                
                // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
                await this.createTables(client);
                
                client.release();
                this.isConnected = true;
                console.log('‚úÖ  - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö PostgreSQL –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ');
                return;
                
            } catch (error) {
                console.error(`‚ùå  - –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries}):`, error.message);
                
                if (attempt === maxRetries) {
                    console.error('‚ùå  - –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏—Å—á–µ—Ä–ø–∞–Ω—ã');
                    throw error;
                }
                
                console.log(`‚è≥  - –û–∂–∏–¥–∞–Ω–∏–µ ${retryDelay}ms –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...`);
                await new Promise(resolve => setTimeout(resolve, retryDelay));
            }
        }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
    async createTables(client) {
        const createUsersTable = `
            CREATE TABLE IF NOT EXISTS users (
                user_id TEXT PRIMARY KEY,
                telegram_name TEXT NOT NULL,
                balance INTEGER DEFAULT 100,
                inventory TEXT DEFAULT '[]',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        `;

        await client.query(createUsersTable);
        console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ users —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞');
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
    async getUser(userId) {
        try {
            const query = 'SELECT * FROM users WHERE user_id = $1';
            const result = await this.pool.query(query, [userId]);
            
            if (result.rows.length === 0) {
                return null;
            }
            
            const user = result.rows[0];
            // –ü–∞—Ä—Å–∏–º JSON –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
            try {
                user.inventory = JSON.parse(user.inventory);
            } catch (e) {
                user.inventory = [];
            }
            
            return user;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            throw error;
        }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async createUser(userId, telegramName, balance = 100) {
        try {
            const query = `
                INSERT INTO users (user_id, telegram_name, balance, inventory)
                VALUES ($1, $2, $3, $4)
                RETURNING *
            `;
            const result = await this.pool.query(query, [userId, telegramName, balance, '[]']);
            
            console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramName} (ID: ${userId}) —Å–æ–∑–¥–∞–Ω`);
            return result.rows[0];
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            throw error;
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async updateUser(userId, data) {
        try {
            const { telegram_name, balance, inventory } = data;
            const inventoryJson = JSON.stringify(inventory || []);
            
            const query = `
                UPDATE users 
                SET telegram_name = COALESCE($1, telegram_name),
                    balance = COALESCE($2, balance),
                    inventory = COALESCE($3, inventory),
                    updated_at = CURRENT_TIMESTAMP
                WHERE user_id = $4
                RETURNING *
            `;
            
            const result = await this.pool.query(query, [telegram_name, balance, inventoryJson, userId]);
            console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –æ–±–Ω–æ–≤–ª–µ–Ω`);
            return result.rows[0];
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            throw error;
        }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (upsert)
    async upsertUser(userId, telegramName, balance = 100, inventory = []) {
        try {
            const existingUser = await this.getUser(userId);
            
            if (existingUser) {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                const updatedUser = await this.updateUser(userId, {
                    telegram_name: telegramName,
                    balance: balance,
                    inventory: inventory
                });
                return updatedUser;
            } else {
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                const newUser = await this.createUser(userId, telegramName, balance);
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if (inventory && inventory.length > 0) {
                    await this.updateUser(userId, { inventory });
                }
                return { user_id: userId, telegram_name: telegramName, balance, inventory };
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ upsert –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            throw error;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    async getAllUsers() {
        try {
            const query = 'SELECT * FROM users ORDER BY created_at DESC';
            const result = await this.pool.query(query);
            
            // –ü–∞—Ä—Å–∏–º JSON –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result.rows.forEach(row => {
                try {
                    row.inventory = JSON.parse(row.inventory);
                } catch (e) {
                    row.inventory = [];
                }
            });
            
            return result.rows;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
            throw error;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    async getUserCount() {
        try {
            const query = 'SELECT COUNT(*) as count FROM users';
            const result = await this.pool.query(query);
            return parseInt(result.rows[0].count);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
            throw error;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    async getStats() {
        try {
            const query = `
                SELECT 
                    COUNT(*) as total_users,
                    SUM(balance) as total_balance,
                    AVG(balance) as avg_balance,
                    COUNT(CASE WHEN balance > 0 THEN 1 END) as users_with_balance
                FROM users
            `;
            
            const result = await this.pool.query(query);
            return result.rows[0];
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            throw error;
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async updateBalance(userId, newBalance) {
        try {
            const query = 'UPDATE users SET balance = $1, updated_at = CURRENT_TIMESTAMP WHERE user_id = $2 RETURNING *';
            const result = await this.pool.query(query, [newBalance, userId]);
            
            console.log(`‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${newBalance}`);
            return result.rows[0];
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
            throw error;
        }
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫ –±–∞–ª–∞–Ω—Å—É
    async addToBalance(userId, amount) {
        try {
            const user = await this.getUser(userId);
            if (!user) {
                throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
            
            const newBalance = user.balance + amount;
            await this.updateBalance(userId, newBalance);
            return { newBalance, added: amount };
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫ –±–∞–ª–∞–Ω—Å—É:', error);
            throw error;
        }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –¥–∞–Ω–Ω—ã—Ö (—Ç–µ–ø–µ—Ä—å –≤ PostgreSQL, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    async createBackup() {
        try {
            const users = await this.getAllUsers();
            const backupData = {
                timestamp: new Date().toISOString(),
                users: users
            };
            
            const backupPath = path.join(__dirname, 'backup_users.json');
            fs.writeFileSync(backupPath, JSON.stringify(backupData, null, 2));
            console.log('‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞:', backupPath);
            return backupPath;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:', error);
            throw error;
        }
    }

    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    async restoreFromBackup(backupPath = null) {
        try {
            const backupFile = backupPath || path.join(__dirname, 'backup_users.json');
            
            console.log(`üîç  - –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: ${backupFile}`);
            console.log(`üîç  - –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${fs.existsSync(backupFile)}`);
            
            if (!fs.existsSync(backupFile)) {
                console.log('üìÅ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                return false;
            }
            
            const backupData = JSON.parse(fs.readFileSync(backupFile, 'utf8'));
            console.log(`üì•  - –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –æ—Ç ${backupData.timestamp}`);
            console.log(`üì•  - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: ${backupData.users.length}`);
            
            for (const user of backupData.users) {
                console.log(`üîÑ  - –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.user_id} (${user.telegram_name})`);
                await this.upsertUser(user.user_id, user.telegram_name, user.balance, user.inventory);
            }
            
            console.log(`‚úÖ  - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${backupData.users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
            return true;
        } catch (error) {
            console.error('‚ùå  - –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:', error);
            throw error;
        }
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    async updateUserWithBackup(userId, data) {
        try {
            console.log(`üîÑ  - –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} —Å –¥–∞–Ω–Ω—ã–º–∏:`, data);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            await this.updateUser(userId, data);
            console.log(`‚úÖ  - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
            
            // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø—Ä–∏ –∫–∞–∂–¥–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            console.log(`üíæ  - –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø—Ä–∏ –∫–∞–∂–¥–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏`);
            await this.createBackup();
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            await this.createEmergencyBackup();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            const userCount = await this.getUserCount();
            console.log(`üìä  - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${userCount}`);
            
            // –°—á–µ—Ç—á–∏–∫ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            const backupCount = global.backupCount || 0;
            global.backupCount = backupCount + 1;
            console.log(`üìä  - –°—á–µ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: ${global.backupCount}`);
            
            return true;
        } catch (error) {
            console.error('‚ùå  - –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º:', error);
            throw error;
        }
    }

    // –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
    async createEmergencyBackup() {
        try {
            const users = await this.getAllUsers();
            const emergencyData = {
                timestamp: new Date().toISOString(),
                users: users,
                total: users.length
            };
            
            const emergencyPath = path.join(__dirname, 'emergency_backup.json');
            fs.writeFileSync(emergencyPath, JSON.stringify(emergencyData, null, 2));
            console.log(`üö®  - –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${emergencyPath}`);
            return emergencyPath;
        } catch (error) {
            console.error('‚ùå  - –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:', error);
            throw error;
        }
    }

    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    async restoreFromEmergencyBackup() {
        try {
            const emergencyPath = path.join(__dirname, 'emergency_backup.json');
            
            if (!fs.existsSync(emergencyPath)) {
                console.log('üö®  - –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                return false;
            }
            
            const emergencyData = JSON.parse(fs.readFileSync(emergencyPath, 'utf8'));
            console.log(`üö®  - –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –æ—Ç ${emergencyData.timestamp}`);
            console.log(`üö®  - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –∫–æ–ø–∏–∏: ${emergencyData.users.length}`);
            
            for (const user of emergencyData.users) {
                console.log(`üîÑ  - –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.user_id} (${user.telegram_name})`);
                await this.upsertUser(user.user_id, user.telegram_name, user.balance, user.inventory);
            }
            
            console.log(`‚úÖ  - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${emergencyData.users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –∫–æ–ø–∏–∏`);
            return true;
        } catch (error) {
            console.error('‚ùå  - –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:', error);
            return false;
        }
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async deleteUser(userId) {
        try {
            const query = 'DELETE FROM users WHERE user_id = $1 RETURNING *';
            const result = await this.pool.query(query, [userId]);
            
            if (result.rows.length === 0) {
                throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
            
            console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö`);
            return result.rows[0];
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            throw error;
        }
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    async close() {
        try {
            await this.pool.end();
            console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
        }
    }
}

export default Database;