const express = require('express');
const cors = require('cors');
const fs = require('fs');
const path = require('path');
const Database = require('./database');

const app = express();
app.use(express.json());
app.use(cors());

// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const BOT_TOKEN = process.env.BOT_TOKEN || '8482617305:AAHnQV93IUQ0dkz67fPaG-hTQCmMj-bkXpw';

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö Telegram
function verifyTelegramData(req, res, next) {
    const { init_data } = req.body;
    if (!init_data) {
        return res.status(400).json({ error: 'Missing init_data' });
    }
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
    // –î–ª—è –¥–µ–º–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
    next();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const db = new Database();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞
async function initializeDatabase() {
    try {
        console.log('üöÄ REDEPLOY TEST - –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
        await db.init();
        console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        
        // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        try {
            console.log('üîÑ REDEPLOY TEST - –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏');
            const restored = await db.restoreFromBackup();
            if (restored) {
                console.log('‚úÖ REDEPLOY TEST - –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏');
            } else {
                console.log('‚ö†Ô∏è REDEPLOY TEST - –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞');
            }
        } catch (backupError) {
            console.log('‚ùå REDEPLOY TEST - –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:', backupError.message);
            console.log('üìÅ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞, –Ω–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–π –±–∞–∑—ã');
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        console.log('üíæ REDEPLOY TEST - –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é');
        await db.createBackup();
        console.log('‚úÖ REDEPLOY TEST - –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ
        const userCount = await db.getUserCount();
        console.log(`üìä REDEPLOY TEST - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: ${userCount}`);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
        process.exit(1);
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/api/user/data', verifyTelegramData, async (req, res) => {
    try {
        const { user_id, telegram_name } = req.body;
        
        console.log('üì• REDEPLOY TEST - –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
            user_id,
            telegram_name,
            full_body: req.body
        });
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        let user = await db.getUser(user_id);
        
        if (!user) {
            console.log(`üë§ REDEPLOY TEST - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ`);
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            user = await db.upsertUser(user_id, telegram_name || 'Unknown User', 100, []);
            console.log(`‚úÖ REDEPLOY TEST - –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user_id}:`, user);
        } else {
            console.log(`üë§ REDEPLOY TEST - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user_id} –Ω–∞–π–¥–µ–Ω:`, {
                user_id: user.user_id,
                telegram_name: user.telegram_name,
                balance: user.balance,
                inventory_count: user.inventory?.length || 0
            });
        }
        
        const response = {
            stars_balance: user.balance,
            inventory: user.inventory || []
        };
        
        console.log('üì§ REDEPLOY TEST - –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç:', response);
        
        res.json(response);
    } catch (error) {
        console.error('‚ùå REDEPLOY TEST - –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        res.status(500).json({ error: 'Failed to get user data' });
    }
});

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/api/user/save', verifyTelegramData, async (req, res) => {
    try {
        const { user_id, telegram_name, stars_balance, inventory } = req.body;
        
        console.log('üíæ REDEPLOY TEST - –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
            user_id,
            telegram_name,
            stars_balance,
            inventory,
            full_body: req.body
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        const existingUser = await db.getUser(user_id);
        console.log(`üîç REDEPLOY TEST - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user_id} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:`, !!existingUser);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        await db.updateUserWithBackup(user_id, {
            telegram_name: telegram_name || 'Unknown User',
            balance: stars_balance,
            inventory: inventory || []
        });
        
        console.log(`‚úÖ REDEPLOY TEST - –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è
        const savedUser = await db.getUser(user_id);
        console.log(`‚úÖ REDEPLOY TEST - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user_id} –≤ –±–∞–∑–µ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:`, {
            exists: !!savedUser,
            balance: savedUser?.balance,
            inventory_count: savedUser?.inventory?.length || 0
        });
        
        res.json({ success: true });
    } catch (error) {
        console.error('‚ùå REDEPLOY TEST - –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        res.status(500).json({ error: 'Failed to save user data' });
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞
app.post('/api/prize/claim', verifyTelegramData, async (req, res) => {
    try {
        const { user_id, prize } = req.body;
        
        console.log(`User ${user_id} claimed prize:`, prize);
        
        let result = { success: true };
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        let user = await db.getUser(user_id);
        if (!user) {
            user = await db.upsertUser(user_id, 'Unknown User', 100, []);
        }
        
        switch (prize.type) {
            case 'gift':
                // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –ø–æ–¥–∞—Ä–∫–∞
                result.gift_message_id = `gift_${Date.now()}`;
                console.log(`Gift ${prize.telegram_gift_id} sent to user ${user_id}`);
                break;
                
            case 'premium':
                // –°–∏–º—É–ª–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é –ø—Ä–µ–º–∏—É–º
                result.subscription_id = `premium_${Date.now()}`;
                console.log(`Premium subscription activated for user ${user_id} for ${prize.premium_duration} days`);
                break;
                
            case 'stars':
                // –î–æ–±–∞–≤–ª—è–µ–º –∑–≤–µ–∑–¥—ã –Ω–∞ –±–∞–ª–∞–Ω—Å
                const newBalance = user.balance + (prize.stars_value || 0);
                await db.updateBalance(user_id, newBalance);
                console.log(`Added ${prize.stars_value} stars to user ${user_id}. New balance: ${newBalance}`);
                break;
        }
        
        res.json(result);
    } catch (error) {
        console.error('Error claiming prize:', error);
        res.status(500).json({ error: 'Failed to claim prize' });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è)
app.get('/api/admin/users', async (req, res) => {
    try {
        console.log('üîç REDEPLOY TEST - –ó–∞–ø—Ä–æ—Å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ
        const userCount = await db.getUserCount();
        console.log(`üìä REDEPLOY TEST - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: ${userCount}`);
        
        const users = await db.getAllUsers();
        console.log(`üìä REDEPLOY TEST - –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);
        console.log('üë• REDEPLOY TEST - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:', users.map(u => ({ id: u.user_id, name: u.telegram_name, balance: u.balance })));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const fs = require('fs');
        const dbPath = require('path').join(__dirname, 'users.db');
        console.log(`üîç REDEPLOY TEST - –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${fs.existsSync(dbPath)}`);
        
        res.json({
            success: true,
            users: users,
            total: users.length
        });
    } catch (error) {
        console.error('‚ùå REDEPLOY TEST - –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
        res.status(500).json({ error: 'Failed to get users' });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
app.get('/api/admin/users/:userId', async (req, res) => {
    try {
        const userId = req.params.userId;
        const user = await db.getUser(userId);
        
        if (!user) {
            return res.status(404).json({ error: 'User not found' });
        }
        
        res.json({
            success: true,
            user: user
        });
    } catch (error) {
        console.error('Error getting user:', error);
        res.status(500).json({ error: 'Failed to get user' });
    }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/api/admin/users/:userId/balance', async (req, res) => {
    try {
        const userId = req.params.userId;
        const { balance } = req.body;
        
        if (typeof balance !== 'number' || balance < 0) {
            return res.status(400).json({ error: 'Invalid balance value' });
        }
        
        await db.updateBalance(userId, balance);
        
        res.json({
            success: true,
            message: `Balance updated to ${balance} for user ${userId}`
        });
    } catch (error) {
        console.error('Error updating balance:', error);
        res.status(500).json({ error: 'Failed to update balance' });
    }
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫ –±–∞–ª–∞–Ω—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/api/admin/users/:userId/add-balance', async (req, res) => {
    try {
        const userId = req.params.userId;
        const { amount } = req.body;
        
        if (typeof amount !== 'number') {
            return res.status(400).json({ error: 'Invalid amount value' });
        }
        
        const result = await db.addToBalance(userId, amount);
        
        res.json({
            success: true,
            message: `Added ${amount} to balance for user ${userId}`,
            newBalance: result.newBalance
        });
    } catch (error) {
        console.error('Error adding to balance:', error);
        res.status(500).json({ error: 'Failed to add to balance' });
    }
});

// Webhook –¥–ª—è Telegram –±–æ—Ç–∞
app.post('/bot/webhook', async (req, res) => {
    try {
        const update = req.body;
        console.log('Bot webhook received:', update);
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram
        if (update.message) {
            const message = update.message;
            const chatId = message.chat.id;
            const text = message.text;
            
            console.log(`Message from ${chatId}: ${text}`);
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
            if (text === '/start') {
                console.log('Start command received');
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                const welcomeMessage = `üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö–µ–π—Å –ú–∞—Å—Ç–µ—Ä!

üéÅ –û—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –∫–µ–π—Å—ã –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –ø—Ä–∏–∑—ã:
‚Ä¢ –ü–æ–¥–∞—Ä–∫–∏ –¥–ª—è –¥—Ä—É–∑–µ–π
‚Ä¢ –°—Ç–∏–∫–µ—Ä—ã
‚Ä¢ Telegram Premium
‚Ä¢ –ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!

üöÄ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å!`;

                const keyboard = {
                    inline_keyboard: [[
                        {
                            text: "üéÆ –û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É",
                            web_app: {
                                url: "https://web-production-877f.up.railway.app/"
                            }
                        }
                    ]]
                };

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram API
                await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        chat_id: chatId,
                        text: welcomeMessage,
                        reply_markup: keyboard
                    })
                });
                
            } else if (text === '/help') {
                const helpMessage = `üéÆ –ö–µ–π—Å –ú–∞—Å—Ç–µ—Ä - –ü–æ–º–æ—â—å

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üéÅ –¢–∏–ø—ã –∫–µ–π—Å–æ–≤:
‚Ä¢ –ë—Ä–æ–Ω–∑–æ–≤—ã–π (10 ‚≠ê)
‚Ä¢ –°–µ—Ä–µ–±—Ä—è–Ω—ã–π (25 ‚≠ê)
‚Ä¢ –ó–æ–ª–æ—Ç–æ–π (50 ‚≠ê)
‚Ä¢ –ê–ª–º–∞–∑–Ω—ã–π (100 ‚≠ê)

üöÄ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã!`;

                const keyboard = {
                    inline_keyboard: [[
                        {
                            text: "üéÆ –ò–≥—Ä–∞—Ç—å",
                            web_app: {
                                url: "https://web-production-877f.up.railway.app/"
                            }
                        }
                    ]]
                };

                await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        chat_id: chatId,
                        text: helpMessage,
                        reply_markup: keyboard
                    })
                });
                
            } else {
                // –û—Ç–≤–µ—Ç –Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                const unknownMessage = `ü§î –ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –∏–ª–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.`;

                const keyboard = {
                    inline_keyboard: [[
                        {
                            text: "üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É",
                            web_app: {
                                url: "https://web-production-877f.up.railway.app/"
                            }
                        }
                    ]]
                };

                await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        chat_id: chatId,
                        text: unknownMessage,
                        reply_markup: keyboard
                    })
                });
            }
        }
        
        res.json({ ok: true });
    } catch (error) {
        console.error('Bot webhook error:', error);
        res.status(500).json({ error: 'Webhook error' });
    }
});

// Webhook –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
app.post('/webhook/payment', async (req, res) => {
    try {
        const { payment } = req.body;
        
        console.log('Payment webhook received:', payment);
        
        if (payment.status === 'completed') {
            const payload = JSON.parse(payment.invoice_payload);
            
            if (payload.type === 'stars_purchase') {
                const starsAmount = parseInt(payment.total_amount) / 100;
                console.log(`User ${payload.user_id} purchased ${starsAmount} stars`);
                
                // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–≤–µ–∑–¥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            }
        }
        
        res.json({ ok: true });
    } catch (error) {
        console.error('Payment webhook error:', error);
        res.status(500).json({ error: 'Webhook error' });
    }
});

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –¥–ª—è Telegram –±–æ—Ç–∞
app.post('/setup-webhook', async (req, res) => {
    try {
        const webhookUrl = process.env.WEBHOOK_URL || req.body.webhook_url || 'https://web-production-877f.up.railway.app/bot/webhook';
        
        console.log(`Setting Telegram webhook to: ${webhookUrl}`);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook —á–µ—Ä–µ–∑ Telegram API
        const telegramResponse = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/setWebhook`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                url: webhookUrl,
                allowed_updates: ['message', 'callback_query']
            })
        });
        
        const result = await telegramResponse.json();
        
        if (result.ok) {
            console.log('Webhook set successfully:', result);
            res.json({ 
                ok: true, 
                description: 'Webhook set successfully',
                url: webhookUrl,
                telegram_response: result
            });
        } else {
            console.error('Failed to set webhook:', result);
            res.status(500).json({ 
                error: 'Failed to set webhook',
                telegram_response: result
            });
        }
    } catch (error) {
        console.error('Error setting webhook:', error);
        res.status(500).json({ error: 'Failed to set webhook' });
    }
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Mini App –¥–ª—è –±–æ—Ç–∞
app.post('/setup-miniapp', async (req, res) => {
    try {
        const miniAppUrl = 'https://web-production-877f.up.railway.app/';
        console.log('Setting up Mini App for bot...');
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Mini App —á–µ—Ä–µ–∑ Telegram API
        const telegramResponse = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/setWebApp`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                url: miniAppUrl
            })
        });
        
        const result = await telegramResponse.json();
        
        if (result.ok) {
            console.log('Mini App set successfully:', result);
            res.json({ 
                ok: true, 
                description: 'Mini App configured successfully',
                url: miniAppUrl,
                telegram_response: result
            });
        } else {
            console.error('Failed to set Mini App:', result);
            res.status(500).json({ 
                error: 'Failed to set Mini App',
                telegram_response: result
            });
        }
    } catch (error) {
        console.error('Error setting Mini App:', error);
        res.status(500).json({ error: 'Failed to set Mini App' });
    }
});

// –£–¥–∞–ª–µ–Ω–∏–µ Mini App –∏–∑ –±–æ—Ç–∞
app.post('/remove-miniapp', async (req, res) => {
    try {
        console.log('Removing Mini App from bot...');
        
        // –£–¥–∞–ª—è–µ–º Mini App —á–µ—Ä–µ–∑ Telegram API
        const telegramResponse = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/deleteWebApp`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            }
        });
        
        const result = await telegramResponse.json();
        
        if (result.ok) {
            console.log('Mini App removed successfully:', result);
            res.json({ 
                ok: true, 
                description: 'Mini App removed successfully',
                telegram_response: result
            });
        } else {
            console.error('Failed to remove Mini App:', result);
            res.status(500).json({ 
                error: 'Failed to remove Mini App',
                telegram_response: result
            });
        }
    } catch (error) {
        console.error('Error removing Mini App:', error);
        res.status(500).json({ error: 'Failed to remove Mini App' });
    }
});

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–¥–∞—á–∞ —Ñ–∞–π–ª–æ–≤
app.use(express.static('.'));

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
    res.sendFile(__dirname + '/index.html');
});

// –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/test', (req, res) => {
    res.sendFile(__dirname + '/test.html');
});

// –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
app.get('/admin', (req, res) => {
    res.sendFile(__dirname + '/admin.html');
});

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ
app.get('/api/info', async (req, res) => {
    try {
        const stats = await db.getStats();
        res.json({
            name: '–ö–µ–π—Å –ú–∞—Å—Ç–µ—Ä API',
            version: '1.0.0',
            status: 'running',
            timestamp: new Date().toISOString(),
            webhook_url: process.env.WEBHOOK_URL || 'https://web-production-877f.up.railway.app/bot/webhook',
            webapp_url: process.env.WEBAPP_URL || 'https://web-production-877f.up.railway.app/',
            bot_token: BOT_TOKEN ? 'configured' : 'missing',
            database: 'SQLite',
            total_users: stats.total_users || 0,
            total_balance: stats.total_balance || 0,
            avg_balance: stats.avg_balance || 0
        });
    } catch (error) {
        console.error('Error getting server info:', error);
        res.status(500).json({ error: 'Failed to get server info' });
    }
});

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è)
app.get('/api/admin/stats', async (req, res) => {
    try {
        const stats = await db.getStats();
        const users = await db.getAllUsers();
        
        const detailedStats = {
            total_users: stats.total_users || 0,
            users_with_balance: stats.users_with_balance || 0,
            total_stars: stats.total_balance || 0,
            avg_balance: stats.avg_balance || 0,
            total_inventory_items: 0,
            users: []
        };

        users.forEach(user => {
            detailedStats.total_inventory_items += user.inventory?.length || 0;
            detailedStats.users.push({
                user_id: user.user_id,
                telegram_name: user.telegram_name,
                stars_balance: user.balance,
                inventory_count: user.inventory?.length || 0,
                created_at: user.created_at,
                updated_at: user.updated_at
            });
        });

        res.json(detailedStats);
    } catch (error) {
        console.error('Error getting stats:', error);
        res.status(500).json({ error: 'Failed to get stats' });
    }
});

// –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
app.post('/api/admin/backup', async (req, res) => {
    try {
        const backupPath = await db.createBackup();
        res.json({ 
            success: true, 
            message: '–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
            backup_path: backupPath
        });
    } catch (error) {
        console.error('Error creating backup:', error);
        res.status(500).json({ error: 'Failed to create backup' });
    }
});

// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
app.post('/api/admin/restore', async (req, res) => {
    try {
        const { backup_path } = req.body;
        const restored = await db.restoreFromBackup(backup_path);
        
        if (restored) {
            res.json({ 
                success: true, 
                message: '–î–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏'
            });
        } else {
            res.status(404).json({ 
                success: false, 
                message: '–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
            });
        }
    } catch (error) {
        console.error('Error restoring from backup:', error);
        res.status(500).json({ error: 'Failed to restore from backup' });
    }
});

const PORT = process.env.PORT || 3000;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async function startServer() {
    try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await initializeDatabase();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        app.listen(PORT, () => {
            console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
            console.log(`üì± –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:${PORT} –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è`);
            console.log(`üß™ –¢–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: http://localhost:${PORT}/test`);
            console.log(`üìä API –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: http://localhost:${PORT}/api/info`);
            console.log(`üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: http://localhost:${PORT}/api/admin/stats`);
            console.log(`üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: SQLite (users.db)`);
            console.log('');
            console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!');
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
startServer();

module.exports = app;
