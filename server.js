import 'dotenv/config';
import express from 'express';
import cors from 'cors';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import Database from './database.js';
import { validateInitData, extractUserData } from './validation.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const app = express();
app.use(express.json());
app.use(cors());

// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const BOT_TOKEN = process.env.BOT_TOKEN;

if (!BOT_TOKEN) {
    console.error('‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!');
    process.exit(1);
}

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö Telegram
function verifyTelegramData(req, res, next) {
    const { init_data } = req.body;
    
    if (!init_data) {
        return res.status(400).json({ 
            error: 'Missing init_data',
            message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram'
        });
    }
    
    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º init_data
    if (!validateInitData(init_data, BOT_TOKEN)) {
        console.log('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å init_data');
        return res.status(401).json({ 
            error: 'Invalid init_data',
            message: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏'
        });
    }
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userData = extractUserData(init_data);
    if (!userData) {
        return res.status(400).json({ 
            error: 'Invalid user data',
            message: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–ø—Ä–æ—Å
    req.telegramUser = userData;
    next();
}

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
// verifyAdmin —É–¥–∞–ª–µ–Ω –∫–∞–∫ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
let db;
try {
    db = new Database();
    console.log('‚úÖ –û–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω');
} catch (error) {
    console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error.message);
    db = { isConnected: false };
}

// –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
async function safeGetUser(userId) {
    if (!db || !db.isConnected) {
        console.log('‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null');
        return null;
    }
    try {
        return await db.getUser(userId);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        return null;
    }
}

async function safeUpsertUser(userId, name, balance, inventory) {
    if (!db || !db.isConnected) {
        console.log('‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –¥–∞–Ω–Ω—ã–µ');
        return { user_id: userId, telegram_name: name, balance, inventory };
    }
    try {
        return await db.upsertUser(userId, name, balance, inventory);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        return { user_id: userId, telegram_name: name, balance, inventory };
    }
}

async function safeUpdateUser(userId, data) {
    if (!db || !db.isConnected) {
        console.log('‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
        return { user_id: userId, ...data };
    }
    try {
        return await db.updateUser(userId, data);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        return { user_id: userId, ...data };
    }
}

// safeGetAllUsers —É–¥–∞–ª–µ–Ω –∫–∞–∫ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π

async function safeGetStats() {
    if (!db || !db.isConnected) {
        console.log('‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
        return {
            total_users: 0,
            users_with_balance: 0,
            total_balance: 0,
            avg_balance: 0
        };
    }
    try {
        return await db.getStats();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        return {
            total_users: 0,
            users_with_balance: 0,
            total_balance: 0,
            avg_balance: 0
        };
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞
async function initializeDatabase() {
    try {
        console.log('üîç –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
        
        if (!db || db.isConnected === false) {
            console.log('‚ö†Ô∏è –û–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π...');
            try {
                db = new Database();
                console.log('‚úÖ –ù–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω');
            } catch (createError) {
                console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', createError.message);
                console.log('‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
                return;
            }
        }
        
        await db.init();
        console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö PostgreSQL –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        
        // –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã (–Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –º–∏–Ω–∏‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ
        try {
            const userCount = await db.getUserCount();
            console.log(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: ${userCount}`);
        } catch (countError) {
            console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', countError.message);
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
        console.log('‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
        // –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/api/user/data', verifyTelegramData, async (req, res) => {
    try {
        const { user_id, telegram_name } = req.body;
        const telegramUser = req.telegramUser;
        
        console.log('üì• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
            user_id,
            telegram_name,
            telegram_user: telegramUser
        });
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        let user = await safeGetUser(user_id);
        
        if (!user) {
            console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ`);
            user = await safeUpsertUser(user_id, telegram_name || 'Unknown User', 100, []);
            console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user_id}:`, user);
        } else {
            console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user_id} –Ω–∞–π–¥–µ–Ω:`, {
                user_id: user.user_id,
                telegram_name: user.telegram_name,
                balance: user.balance,
                inventory_count: user.inventory?.length || 0
            });
        }
        
        const response = {
            stars_balance: user.balance,
            inventory: user.inventory || []
        };
        
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç:', response);
        res.json(response);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        res.status(500).json({ 
            error: 'Failed to get user data',
            message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        });
    }
});

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/api/user/save', verifyTelegramData, async (req, res) => {
    try {
        const { user_id, telegram_name, stars_balance, inventory } = req.body;
        const telegramUser = req.telegramUser;
        
        console.log('üíæ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
            user_id,
            telegram_name,
            stars_balance,
            inventory,
            telegram_user: telegramUser
        });
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await safeUpdateUser(user_id, {
            telegram_name: telegram_name || 'Unknown User',
            balance: stars_balance,
            inventory: inventory || []
        });
        
        console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ`);
        res.json({ success: true });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        res.status(500).json({ 
            error: 'Failed to save user data',
            message: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        });
    }
});

// –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –∫–µ–π—Å–∞
app.post('/api/case/open', verifyTelegramData, async (req, res) => {
    try {
        const { user_id, case_type, price, prize } = req.body;
        const telegramUser = req.telegramUser;
        
        console.log(`üé∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user_id} –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –∫–µ–π—Å ${case_type} –∑–∞ ${price} –∑–≤–µ–∑–¥`);
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let user = await safeGetUser(user_id);
        if (!user) {
            return res.status(404).json({ 
                error: 'User not found',
                message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
            });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        if (user.balance < price) {
            return res.status(400).json({ 
                error: 'Insufficient balance',
                message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞'
            });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏–∑ –≤–∞–ª–∏–¥–Ω—ã–π
        if (!prize || !prize.name || !prize.type) {
            return res.status(400).json({ 
                error: 'Invalid prize',
                message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–∑–∞'
            });
        }
        
        // –ê—Ç–æ–º–∞—Ä–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: —Å–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏ –ò –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–∑
        const newBalance = user.balance - price;
        const newInventory = [...(user.inventory || []), prize];
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        await safeUpdateUser(user_id, {
            telegram_name: user.telegram_name,
            balance: newBalance,
            inventory: newInventory
        });
        
        console.log(`‚úÖ –ö–µ–π—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${newBalance}, –ø—Ä–∏–∑ –¥–æ–±–∞–≤–ª–µ–Ω: ${prize.name}`);
        
        res.json({
            success: true,
            new_balance: newBalance,
            prize: prize,
            message: '–ö–µ–π—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç'
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞:', error);
        res.status(500).json({ 
            error: 'Failed to open case',
            message: '–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞'
        });
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞
app.post('/api/prize/claim', verifyTelegramData, async (req, res) => {
    try {
        const { user_id, prize } = req.body;
        const telegramUser = req.telegramUser;
        
        console.log(`User ${user_id} claimed prize:`, prize);
        
        let result = { success: true };
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        let user = await safeGetUser(user_id);
        if (!user) {
            user = await safeUpsertUser(user_id, 'Unknown User', 100, []);
        }
        
        switch (prize.type) {
            case 'gift':
                result.gift_message_id = `gift_${Date.now()}`;
                console.log(`Gift ${prize.telegram_gift_id} sent to user ${user_id}`);
                break;
                
            case 'premium':
                result.subscription_id = `premium_${Date.now()}`;
                console.log(`Premium subscription activated for user ${user_id} for ${prize.premium_duration} days`);
                break;
                
            case 'stars':
                const newBalance = user.balance + (prize.stars_value || 0);
                await db.updateBalance(user_id, newBalance);
                console.log(`Added ${prize.stars_value} stars to user ${user_id}. New balance: ${newBalance}`);
                break;
        }
        
        res.json(result);
    } catch (error) {
        console.error('Error claiming prize:', error);
        res.status(500).json({ 
            error: 'Failed to claim prize',
            message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞'
        });
    }
});

// –ê–¥–º–∏–Ω—Å–∫–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
// –ê–¥–º–∏–Ω—Å–∫–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —É–¥–∞–ª–µ–Ω—ã –∫–∞–∫ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ

// Webhook –±–æ—Ç–∞ —É–¥–∞–ª—ë–Ω –∫–∞–∫ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–¥–∞—á–∞ —Ñ–∞–π–ª–æ–≤
app.use(express.static('.'));

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
    res.sendFile(join(__dirname, 'index.html'));
});

// –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å —É–¥–∞–ª–µ–Ω–∞

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ
app.get('/api/info', async (req, res) => {
    try {
        const stats = await safeGetStats();
        res.json({
            name: '–ö–µ–π—Å –ú–∞—Å—Ç–µ—Ä API',
            version: '2.0.0',
            status: 'running',
            timestamp: new Date().toISOString(),
            webhook_url: null,
            webapp_url: process.env.WEBAPP_URL || null,
            bot_token: BOT_TOKEN ? 'configured' : 'missing',
            database: 'PostgreSQL',
            total_users: stats.total_users || 0,
            total_balance: stats.total_balance || 0,
            avg_balance: stats.avg_balance || 0
        });
    } catch (error) {
        console.error('Error getting server info:', error);
        res.status(500).json({ 
            error: 'Failed to get server info',
            message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ'
        });
    }
});

const PORT = process.env.PORT || 3000;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async function startServer() {
    try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await initializeDatabase();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        app.listen(PORT, () => {
            console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
            console.log(`üì± –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:${PORT} –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è`);
            console.log(`üìä API –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: http://localhost:${PORT}/api/info`);
            console.log(`üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: PostgreSQL (Railway)`);
            console.log('');
            console.log('‚úÖ Telegram Mini App –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
startServer();

export default app;