const express = require('express');
const cors = require('cors');

const app = express();
app.use(express.json());
app.use(cors());

// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const BOT_TOKEN = process.env.BOT_TOKEN || '8448668571:AAHKzTQp9Zd86sTgbPbKeWTS3Cc6fE0G91k';

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö Telegram
function verifyTelegramData(req, res, next) {
    const { init_data } = req.body;
    if (!init_data) {
        return res.status(400).json({ error: 'Missing init_data' });
    }
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
    // –î–ª—è –¥–µ–º–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
    next();
}

// –ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏ (–¥–ª—è –¥–µ–º–æ)
const userData = new Map();

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/api/user/data', verifyTelegramData, async (req, res) => {
    try {
        const { user_id } = req.body;
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = userData.get(user_id) || {
            stars_balance: 100,
            inventory: []
        };
        
        res.json({
            stars_balance: user.stars_balance,
            inventory: user.inventory
        });
    } catch (error) {
        console.error('Error getting user data:', error);
        res.status(500).json({ error: 'Failed to get user data' });
    }
});

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/api/user/save', verifyTelegramData, async (req, res) => {
    try {
        const { user_id, stars_balance, inventory } = req.body;
        
        console.log(`Saving user data for ${user_id}:`, { stars_balance, inventory });
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        userData.set(user_id, {
            stars_balance: stars_balance,
            inventory: inventory,
            last_updated: new Date()
        });
        
        res.json({ success: true });
    } catch (error) {
        console.error('Error saving user data:', error);
        res.status(500).json({ error: 'Failed to save user data' });
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞
app.post('/api/prize/claim', verifyTelegramData, async (req, res) => {
    try {
        const { user_id, prize } = req.body;
        
        console.log(`User ${user_id} claimed prize:`, prize);
        
        let result = { success: true };
        
        switch (prize.type) {
            case 'gift':
                // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –ø–æ–¥–∞—Ä–∫–∞
                result.gift_message_id = `gift_${Date.now()}`;
                console.log(`Gift ${prize.telegram_gift_id} sent to user ${user_id}`);
                break;
                
            case 'premium':
                // –°–∏–º—É–ª–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é –ø—Ä–µ–º–∏—É–º
                result.subscription_id = `premium_${Date.now()}`;
                console.log(`Premium subscription activated for user ${user_id} for ${prize.premium_duration} days`);
                break;
                
            case 'stars':
                // –î–æ–±–∞–≤–ª—è–µ–º –∑–≤–µ–∑–¥—ã –Ω–∞ –±–∞–ª–∞–Ω—Å
                console.log(`Added ${prize.stars_value} stars to user ${user_id}`);
                break;
        }
        
        res.json(result);
    } catch (error) {
        console.error('Error claiming prize:', error);
        res.status(500).json({ error: 'Failed to claim prize' });
    }
});

// Webhook –¥–ª—è Telegram –±–æ—Ç–∞
app.post('/bot/webhook', async (req, res) => {
    try {
        const update = req.body;
        console.log('Bot webhook received:', update);
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram
        if (update.message) {
            const message = update.message;
            const chatId = message.chat.id;
            const text = message.text;
            
            console.log(`Message from ${chatId}: ${text}`);
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
            if (text === '/start') {
                console.log('Start command received');
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                const welcomeMessage = `üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö–µ–π—Å –ú–∞—Å—Ç–µ—Ä!

üéÅ –û—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –∫–µ–π—Å—ã –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –ø—Ä–∏–∑—ã:
‚Ä¢ –ü–æ–¥–∞—Ä–∫–∏ –¥–ª—è –¥—Ä—É–∑–µ–π
‚Ä¢ –°—Ç–∏–∫–µ—Ä—ã
‚Ä¢ Telegram Premium
‚Ä¢ –ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!

üöÄ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å!`;

                const keyboard = {
                    inline_keyboard: [[
                        {
                            text: "üéÆ –û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É",
                            web_app: {
                                url: "https://web-production-877f.up.railway.app/"
                            }
                        }
                    ]]
                };

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram API
                await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        chat_id: chatId,
                        text: welcomeMessage,
                        reply_markup: keyboard
                    })
                });
                
            } else if (text === '/help') {
                const helpMessage = `üéÆ –ö–µ–π—Å –ú–∞—Å—Ç–µ—Ä - –ü–æ–º–æ—â—å

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üéÅ –¢–∏–ø—ã –∫–µ–π—Å–æ–≤:
‚Ä¢ –ë—Ä–æ–Ω–∑–æ–≤—ã–π (10 ‚≠ê)
‚Ä¢ –°–µ—Ä–µ–±—Ä—è–Ω—ã–π (25 ‚≠ê)
‚Ä¢ –ó–æ–ª–æ—Ç–æ–π (50 ‚≠ê)
‚Ä¢ –ê–ª–º–∞–∑–Ω—ã–π (100 ‚≠ê)

üöÄ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã!`;

                const keyboard = {
                    inline_keyboard: [[
                        {
                            text: "üéÆ –ò–≥—Ä–∞—Ç—å",
                            web_app: {
                                url: "https://web-production-877f.up.railway.app/"
                            }
                        }
                    ]]
                };

                await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        chat_id: chatId,
                        text: helpMessage,
                        reply_markup: keyboard
                    })
                });
                
            } else {
                // –û—Ç–≤–µ—Ç –Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                const unknownMessage = `ü§î –ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –∏–ª–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.`;

                const keyboard = {
                    inline_keyboard: [[
                        {
                            text: "üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É",
                            web_app: {
                                url: "https://web-production-877f.up.railway.app/"
                            }
                        }
                    ]]
                };

                await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        chat_id: chatId,
                        text: unknownMessage,
                        reply_markup: keyboard
                    })
                });
            }
        }
        
        res.json({ ok: true });
    } catch (error) {
        console.error('Bot webhook error:', error);
        res.status(500).json({ error: 'Webhook error' });
    }
});

// Webhook –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
app.post('/webhook/payment', async (req, res) => {
    try {
        const { payment } = req.body;
        
        console.log('Payment webhook received:', payment);
        
        if (payment.status === 'completed') {
            const payload = JSON.parse(payment.invoice_payload);
            
            if (payload.type === 'stars_purchase') {
                const starsAmount = parseInt(payment.total_amount) / 100;
                console.log(`User ${payload.user_id} purchased ${starsAmount} stars`);
                
                // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–≤–µ–∑–¥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            }
        }
        
        res.json({ ok: true });
    } catch (error) {
        console.error('Payment webhook error:', error);
        res.status(500).json({ error: 'Webhook error' });
    }
});

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –¥–ª—è Telegram –±–æ—Ç–∞
app.post('/setup-webhook', async (req, res) => {
    try {
        const webhookUrl = process.env.WEBHOOK_URL || req.body.webhook_url || 'https://web-production-877f.up.railway.app/bot/webhook';
        
        console.log(`Setting Telegram webhook to: ${webhookUrl}`);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook —á–µ—Ä–µ–∑ Telegram API
        const telegramResponse = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/setWebhook`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                url: webhookUrl,
                allowed_updates: ['message', 'callback_query']
            })
        });
        
        const result = await telegramResponse.json();
        
        if (result.ok) {
            console.log('Webhook set successfully:', result);
            res.json({ 
                ok: true, 
                description: 'Webhook set successfully',
                url: webhookUrl,
                telegram_response: result
            });
        } else {
            console.error('Failed to set webhook:', result);
            res.status(500).json({ 
                error: 'Failed to set webhook',
                telegram_response: result
            });
        }
    } catch (error) {
        console.error('Error setting webhook:', error);
        res.status(500).json({ error: 'Failed to set webhook' });
    }
});

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–¥–∞—á–∞ —Ñ–∞–π–ª–æ–≤
app.use(express.static('.'));

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
    res.sendFile(__dirname + '/index.html');
});

// –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/test', (req, res) => {
    res.sendFile(__dirname + '/test.html');
});

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ
app.get('/api/info', (req, res) => {
    res.json({
        name: '–ö–µ–π—Å –ú–∞—Å—Ç–µ—Ä API',
        version: '1.0.0',
        status: 'running',
        timestamp: new Date().toISOString(),
        webhook_url: process.env.WEBHOOK_URL || 'https://web-production-877f.up.railway.app/bot/webhook',
        webapp_url: process.env.WEBAPP_URL || 'https://web-production-877f.up.railway.app/',
        bot_token: BOT_TOKEN ? 'configured' : 'missing'
    });
});

const PORT = process.env.PORT || 3000;

app.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üì± –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:${PORT} –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è`);
    console.log(`üß™ –¢–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: http://localhost:${PORT}/test`);
    console.log(`üìä API –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: http://localhost:${PORT}/api/info`);
    console.log('');
    console.log('‚ö†Ô∏è  –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å BOT_TOKEN –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω!');
});

module.exports = app;
