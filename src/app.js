// –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
import { CONFIG } from './config.js';
import { validateInitData, extractUserData, validateUserData } from './utils/validation.js';
import { userManager } from './components/UserManager.js';
import { caseManager } from './components/CaseManager.js';
import { showNotification } from './utils/notifications.js';

class TelegramMiniApp {
    constructor() {
        this.tg = window.Telegram?.WebApp;
        this.isInitialized = false;
        this.currentTab = 'cases';
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    async init() {
        try {
            console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Mini App...');

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
            if (this.tg) {
                this.tg.ready();
                this.tg.expand();
                this.setupTelegramTheme();
            }

            // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userData = await this.initializeUser();
            if (!userData) {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            }

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI
            this.initializeUI();
            this.setupEventListeners();

            this.isInitialized = true;
            console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
            showNotification('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', 'error');
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {Promise<Object|null>} - –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async initializeUser() {
        try {
            let userData = null;

            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram
            if (this.tg?.initDataUnsafe?.user) {
                userData = this.tg.initDataUnsafe.user;
            } else if (this.tg?.initData) {
                userData = extractUserData(this.tg.initData);
            }

            // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (!userData || !validateUserData(userData)) {
                console.warn('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
                userData = {
                    id: 'user_' + Date.now(),
                    first_name: 'Guest User'
                };
            }

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            return await userManager.initializeUser(userData);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            return null;
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã Telegram
     */
    setupTelegramTheme() {
        if (!this.tg) return;

        const themeParams = this.tg.themeParams;
        const colorScheme = this.tg.colorScheme;

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É
        document.documentElement.style.setProperty('--tg-theme-bg-color', themeParams.bg_color || '#ffffff');
        document.documentElement.style.setProperty('--tg-theme-text-color', themeParams.text_color || '#000000');
        document.documentElement.style.setProperty('--tg-theme-button-color', themeParams.button_color || '#2481cc');
        document.documentElement.style.setProperty('--tg-theme-button-text-color', themeParams.button_text_color || '#ffffff');

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å —Ç–µ–º—ã
        document.body.classList.add(`theme-${colorScheme}`);
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI
     */
    initializeUI() {
        this.updateStarsDisplay();
        this.updateInventoryDisplay();
        this.setupTabs();
        this.setupCases();
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–∞–±–æ–≤
        document.querySelectorAll('.tab-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const tab = e.target.dataset.tab;
                this.switchTab(tab);
            });
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–µ–π—Å–æ–≤
        document.querySelectorAll('.case-item').forEach(item => {
            item.addEventListener('click', (e) => {
                const caseType = e.currentTarget.dataset.case;
                const price = parseInt(e.currentTarget.dataset.price);
                this.openCase(caseType, price);
            });
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥
        document.querySelectorAll('.buy-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const amount = parseInt(e.target.dataset.amount);
                this.buyStars(amount);
            });
        });
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–∞–±–æ–≤
     * @param {string} tabName - –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–∞
     */
    switchTab(tabName) {
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø–∞–Ω–µ–ª–∏
        document.querySelectorAll('.tab-panel').forEach(panel => {
            panel.classList.remove('active');
        });

        // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å –∫–Ω–æ–ø–æ–∫
        document.querySelectorAll('.tab-btn').forEach(btn => {
            btn.classList.remove('active');
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é –ø–∞–Ω–µ–ª—å
        const targetPanel = document.getElementById(`${tabName}-tab`);
        const targetBtn = document.querySelector(`[data-tab="${tabName}"]`);

        if (targetPanel) targetPanel.classList.add('active');
        if (targetBtn) targetBtn.classList.add('active');

        this.currentTab = tabName;

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∞–±–∞
        if (tabName === 'inventory') {
            this.updateInventoryDisplay();
        }
    }

    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–µ–π—Å–∞
     * @param {string} caseType - –¢–∏–ø –∫–µ–π—Å–∞
     * @param {number} price - –¶–µ–Ω–∞ –∫–µ–π—Å–∞
     */
    async openCase(caseType, price) {
        try {
            if (caseManager.isCaseOpening()) {
                showNotification('–ö–µ–π—Å —É–∂–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è', 'warning');
                return;
            }

            if (userManager.starsBalance < price) {
                showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥', 'error');
                return;
            }

            // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∏ –∂–¥–µ–º –µ—ë –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            const animatedPrize = await this.showOpeningAnimation(caseType);

            // –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–µ–π—Å
            const result = await caseManager.openCase(caseType, price);

            if (result.success) {
                // –û–±–Ω–æ–≤–ª—è–µ–º UI
                this.updateStarsDisplay();
                this.updateInventoryDisplay();

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–∑
                this.showPrizeModal(result.prize);

                showNotification('–ö–µ–π—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç!', 'success');
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞:', error);
            showNotification(error.message || '–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞', 'error');
        } finally {
            this.hideOpeningAnimation();
        }
    }

    /**
     * –ü–æ–∫—É–ø–∫–∞ –∑–≤–µ–∑–¥
     * @param {number} amount - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥
     */
    async buyStars(amount) {
        try {
            if (!this.tg) {
                showNotification('–§—É–Ω–∫—Ü–∏—è –ø–æ–∫—É–ø–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞', 'error');
                return;
            }

            // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram Payments
            showNotification('–§—É–Ω–∫—Ü–∏—è –ø–æ–∫—É–ø–∫–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', 'info');

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥:', error);
            showNotification('–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥', 'error');
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–≤–µ–∑–¥
     */
    updateStarsDisplay() {
        const starsElement = document.getElementById('stars-count');
        if (starsElement) {
            starsElement.textContent = userManager.starsBalance;
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
     */
    updateInventoryDisplay() {
        const inventoryGrid = document.getElementById('inventory-grid');
        if (!inventoryGrid) return;

        inventoryGrid.innerHTML = '';

        if (userManager.inventory.length === 0) {
            inventoryGrid.innerHTML = '<p class="empty-inventory">–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç</p>';
            return;
        }

        userManager.inventory.forEach(item => {
            const itemElement = this.createInventoryItem(item);
            inventoryGrid.appendChild(itemElement);
        });
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
     * @param {Object} item - –ü—Ä–µ–¥–º–µ—Ç
     * @returns {HTMLElement} - –≠–ª–µ–º–µ–Ω—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
     */
    createInventoryItem(item) {
        const div = document.createElement('div');
        div.className = 'inventory-item';
        div.innerHTML = `
            <div class="item-icon">${this.getItemIcon(item)}</div>
            <div class="item-name">${item.name}</div>
            <div class="item-rarity ${item.rarity}">${this.getRarityName(item.rarity)}</div>
        `;
        return div;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞
     * @param {Object} item - –ü—Ä–µ–¥–º–µ—Ç
     * @returns {string} - –ò–∫–æ–Ω–∫–∞
     */
    getItemIcon(item) {
        const icons = {
            sticker: 'üìÑ',
            gift: 'üéÅ',
            premium: '‚≠ê',
            stars: 'üí´'
        };
        return icons[item.type] || '‚ùì';
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ–¥–∫–æ—Å—Ç–∏
     * @param {string} rarity - –†–µ–¥–∫–æ—Å—Ç—å
     * @returns {string} - –ù–∞–∑–≤–∞–Ω–∏–µ
     */
    getRarityName(rarity) {
        const names = {
            common: '–û–±—ã—á–Ω—ã–π',
            rare: '–†–µ–¥–∫–∏–π',
            epic: '–≠–ø–∏—á–µ—Å–∫–∏–π',
            legendary: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π'
        };
        return names[rarity] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }

    /**
     * –ü–æ–∫–∞–∑ –∞–Ω–∏–º–∞—Ü–∏–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è
     */
    async showOpeningAnimation(caseType) {
        const openingArea = document.getElementById('opening-area');
        if (openingArea) {
            openingArea.style.display = 'block';
            
            // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
            try {
                const { caseAnimation } = await import('./utils/caseAnimation.js');
                return new Promise((resolve) => {
                    caseAnimation.startAnimation(caseType, (prize) => {
                        resolve(prize);
                    });
                });
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∏–º–∞—Ü–∏–∏:', error);
                return null;
            }
        }
        return null;
    }

    /**
     * –°–∫—Ä—ã—Ç–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è
     */
    hideOpeningAnimation() {
        const openingArea = document.getElementById('opening-area');
        if (openingArea) {
            openingArea.style.display = 'none';
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        if (window.caseAnimation) {
            window.caseAnimation.reset();
        }
    }

    /**
     * –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –ø—Ä–∏–∑–æ–º
     * @param {Object} prize - –ü—Ä–∏–∑
     */
    showPrizeModal(prize) {
        const modal = document.getElementById('prize-modal');
        if (!modal) return;

        // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–∑–∞
        const iconElement = document.getElementById('modal-prize-icon');
        const nameElement = document.getElementById('modal-prize-name');
        const descriptionElement = document.getElementById('modal-prize-description');

        if (iconElement) iconElement.textContent = this.getItemIcon(prize);
        if (nameElement) nameElement.textContent = prize.name;
        if (descriptionElement) descriptionElement.textContent = prize.description || '';

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        modal.style.display = 'flex';

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            modal.style.display = 'none';
        }, 3000);
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–æ–≤
     */
    setupTabs() {
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π —Ç–∞–±
        this.switchTab('cases');
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–µ–π—Å–æ–≤
     */
    setupCases() {
        // –ö–µ–π—Å—ã —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ HTML
        console.log('–ö–µ–π—Å—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const app = new TelegramMiniApp();

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    app.init();
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
window.TelegramMiniApp = app;
