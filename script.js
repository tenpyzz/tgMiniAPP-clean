// Telegram Mini App - –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª
console.log('üöÄ –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è Telegram Mini App...');

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let userStars = 0;
let userInventory = [];
let isOpening = false;
let currentUserId = null;
let pendingPrize = null;
let currentTab = 'cases';

// Telegram WebApp API
const tg = window.Telegram?.WebApp;

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
    API_BASE_URL: window.location.origin,
    ADMIN_USER_ID: '1165123437',
    DEFAULT_STAR_BALANCE: 100,
    CASE_TYPES: {
        ultimate: {
            name: '–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –ö–µ–π—Å',
            price: 50,
            description: '–í—Å–µ –ø—Ä–∏–∑—ã –≤ –æ–¥–Ω–æ–º –∫–µ–π—Å–µ!'
        }
    },
    PRIZES: {
        common: [
            { name: '–û–±—ã—á–Ω—ã–π —Å—Ç–∏–∫–µ—Ä', type: 'sticker', rarity: 'common', value: 1 },
            { name: '–ü—Ä–æ—Å—Ç–æ–π –ø–æ–¥–∞—Ä–æ–∫', type: 'gift', rarity: 'common', value: 5 }
        ],
        rare: [
            { name: '–†–µ–¥–∫–∏–π —Å—Ç–∏–∫–µ—Ä', type: 'sticker', rarity: 'rare', value: 10 },
            { name: '–ö—Ä—É—Ç–æ–π –ø–æ–¥–∞—Ä–æ–∫', type: 'gift', rarity: 'rare', value: 25 }
        ],
        epic: [
            { name: '–≠–ø–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–∫–µ—Ä', type: 'sticker', rarity: 'epic', value: 50 },
            { name: '–ü—Ä–µ–º–∏—É–º –ø–æ–¥–∞—Ä–æ–∫', type: 'gift', rarity: 'epic', value: 100 }
        ],
        legendary: [
            { name: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π —Å—Ç–∏–∫–µ—Ä', type: 'sticker', rarity: 'legendary', value: 200 },
            { name: '–ê–ª–º–∞–∑–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫', type: 'gift', rarity: 'legendary', value: 500 },
            { name: 'Telegram Premium', type: 'premium', rarity: 'legendary', value: 1000, duration: 30 }
        ]
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è userId
function getUserId() {
    // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ Telegram WebApp
    if (tg?.initDataUnsafe?.user?.id) {
        const telegramUserId = tg.initDataUnsafe.user.id.toString();
        localStorage.setItem('telegram_user_id', telegramUserId);
        console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω userId –æ—Ç Telegram:', telegramUserId);
        return telegramUserId;
    }
    
    // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ initData
    if (tg?.initData) {
        try {
            const urlParams = new URLSearchParams(tg.initData);
            const userParam = urlParams.get('user');
            if (userParam) {
                const userData = JSON.parse(decodeURIComponent(userParam));
                if (userData.id) {
                    const telegramUserId = userData.id.toString();
                    localStorage.setItem('telegram_user_id', telegramUserId);
                    console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω userId –∏–∑ initData:', telegramUserId);
                    return telegramUserId;
                }
            }
        } catch (e) {
            console.log('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ initData:', e);
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π userId –≤ localStorage
    const savedUserId = localStorage.getItem('telegram_user_id');
    if (savedUserId) {
        console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π userId –∏–∑ localStorage:', savedUserId);
        return savedUserId;
    }
    
    // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
    const fallbackId = 'user_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
    console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å userId –æ—Ç Telegram, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback:', fallbackId);
    localStorage.setItem('telegram_user_id', fallbackId);
    return fallbackId;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function getUserName() {
    if (tg?.initDataUnsafe?.user?.first_name) {
        const telegramUserName = tg.initDataUnsafe.user.first_name;
        localStorage.setItem('telegram_user_name', telegramUserName);
        console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç Telegram:', telegramUserName);
        return telegramUserName;
    }
    
    if (tg?.initData) {
        try {
            const urlParams = new URLSearchParams(tg.initData);
            const userParam = urlParams.get('user');
            if (userParam) {
                const userData = JSON.parse(decodeURIComponent(userParam));
                if (userData.first_name) {
                    const telegramUserName = userData.first_name;
                    localStorage.setItem('telegram_user_name', telegramUserName);
                    console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ initData:', telegramUserName);
                    return telegramUserName;
                }
            }
        } catch (e) {
            console.log('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ initData –¥–ª—è –∏–º–µ–Ω–∏:', e);
        }
    }
    
    const savedUserName = localStorage.getItem('telegram_user_name');
    if (savedUserName) {
        console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∏–º—è –∏–∑ localStorage:', savedUserName);
        return savedUserName;
    }
    
    return 'Unknown User';
}

// API —Ñ—É–Ω–∫—Ü–∏–∏
async function apiRequest(endpoint, options = {}) {
    const url = `${CONFIG.API_BASE_URL}${endpoint}`;
    const defaultOptions = {
        headers: {
            'Content-Type': 'application/json',
        },
    };

    const mergedOptions = { ...defaultOptions, ...options };
    
    try {
        const response = await fetch(url, mergedOptions);
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        return await response.json();
    } catch (error) {
        console.error('API request failed:', error);
        throw error;
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getUserData() {
    try {
        const userId = getUserId();
        const userName = getUserName();
        
        const response = await apiRequest('/api/user/data', {
            method: 'POST',
            body: JSON.stringify({
                user_id: userId,
                telegram_name: userName,
                init_data: tg?.initData || ''
            })
        });

        userStars = response.stars_balance || 0;
        userInventory = response.inventory || [];
        currentUserId = userId;
        
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', { userStars, userInventory });
        return response;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        userStars = CONFIG.DEFAULT_STAR_BALANCE;
        userInventory = [];
        currentUserId = getUserId();
        return { stars_balance: userStars, inventory: userInventory };
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function saveUserData() {
    try {
        if (!currentUserId) return;
        
        await apiRequest('/api/user/save', {
            method: 'POST',
            body: JSON.stringify({
                user_id: currentUserId,
                telegram_name: getUserName(),
                stars_balance: userStars,
                inventory: userInventory,
                init_data: tg?.initData || ''
            })
        });
        
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–∑–∞
function generatePrize(rarity = 'common') {
    const prizes = CONFIG.PRIZES[rarity] || CONFIG.PRIZES.common;
    const randomIndex = Math.floor(Math.random() * prizes.length);
    const basePrize = prizes[randomIndex];
    
    return {
        ...basePrize,
        id: 'prize_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9),
        timestamp: Date.now()
    };
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–∑–∞ –¥–ª—è –∫–µ–π—Å–∞
function generateCasePrize() {
    const probabilities = {
        common: 0.6,    // 60%
        rare: 0.25,     // 25%
        epic: 0.12,     // 12%
        legendary: 0.03 // 3%
    };

    const random = Math.random();
    let cumulativeProbability = 0;
    
    for (const [rarity, probability] of Object.entries(probabilities)) {
        cumulativeProbability += probability;
        if (random <= cumulativeProbability) {
            return generatePrize(rarity);
        }
    }
    
    return generatePrize('common');
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–µ–π—Å–∞
async function openCase(caseType, price) {
    try {
        if (isOpening) {
            showNotification('–ö–µ–π—Å —É–∂–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è', 'warning');
            return;
        }

        if (userStars < price) {
            showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥', 'error');
            return;
        }

        isOpening = true;
        showOpeningAnimation();

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–∑
        const prize = generateCasePrize();
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        const result = await apiRequest('/api/case/open', {
            method: 'POST',
            body: JSON.stringify({
                user_id: currentUserId,
                case_type: caseType,
                price: price,
                prize: prize,
                init_data: tg?.initData || ''
            })
        });

        if (result.success) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            userStars = result.new_balance;
            userInventory.push(prize);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º UI
            updateStarsDisplay();
            updateInventoryDisplay();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–∑
            showPrizeModal(prize);
            
            showNotification('–ö–µ–π—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç!', 'success');
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞:', error);
        showNotification(error.message || '–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞', 'error');
    } finally {
        isOpening = false;
        hideOpeningAnimation();
    }
}

// –ü–æ–∫—É–ø–∫–∞ –∑–≤–µ–∑–¥
async function buyStars(amount) {
    try {
        if (!tg) {
            showNotification('–§—É–Ω–∫—Ü–∏—è –ø–æ–∫—É–ø–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞', 'error');
            return;
        }

        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram Payments
        showNotification('–§—É–Ω–∫—Ü–∏—è –ø–æ–∫—É–ø–∫–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', 'info');

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥', 'error');
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–≤–µ–∑–¥
function updateStarsDisplay() {
    const starsElement = document.getElementById('stars-count');
    if (starsElement) {
        starsElement.textContent = userStars;
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
function updateInventoryDisplay() {
    const inventoryGrid = document.getElementById('inventory-grid');
    if (!inventoryGrid) return;

    inventoryGrid.innerHTML = '';

    if (userInventory.length === 0) {
        inventoryGrid.innerHTML = '<p class="empty-inventory">–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç</p>';
        return;
    }

    userInventory.forEach(item => {
        const itemElement = createInventoryItem(item);
        inventoryGrid.appendChild(itemElement);
    });
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
function createInventoryItem(item) {
    const div = document.createElement('div');
    div.className = 'inventory-item';
    div.innerHTML = `
        <div class="item-icon">${getItemIcon(item)}</div>
        <div class="item-name">${item.name}</div>
        <div class="item-rarity ${item.rarity}">${getRarityName(item.rarity)}</div>
    `;
    return div;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞
function getItemIcon(item) {
    const icons = {
        sticker: 'üìÑ',
        gift: 'üéÅ',
        premium: '‚≠ê',
        stars: 'üí´'
    };
    return icons[item.type] || '‚ùì';
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ–¥–∫–æ—Å—Ç–∏
function getRarityName(rarity) {
    const names = {
        common: '–û–±—ã—á–Ω—ã–π',
        rare: '–†–µ–¥–∫–∏–π',
        epic: '–≠–ø–∏—á–µ—Å–∫–∏–π',
        legendary: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π'
    };
    return names[rarity] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–∞–±–æ–≤
function switchTab(tabName) {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø–∞–Ω–µ–ª–∏
    document.querySelectorAll('.tab-panel').forEach(panel => {
        panel.classList.remove('active');
    });

    // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å –∫–Ω–æ–ø–æ–∫
    document.querySelectorAll('.tab-btn').forEach(btn => {
        btn.classList.remove('active');
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é –ø–∞–Ω–µ–ª—å
    const targetPanel = document.getElementById(`${tabName}-tab`);
    const targetBtn = document.querySelector(`[data-tab="${tabName}"]`);

    if (targetPanel) targetPanel.classList.add('active');
    if (targetBtn) targetBtn.classList.add('active');

    currentTab = tabName;

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∞–±–∞
    if (tabName === 'inventory') {
        updateInventoryDisplay();
    }
}

// –ü–æ–∫–∞–∑ –∞–Ω–∏–º–∞—Ü–∏–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è
function showOpeningAnimation() {
    const openingArea = document.getElementById('opening-area');
    if (openingArea) {
        openingArea.style.display = 'block';
    }
}

// –°–∫—Ä—ã—Ç–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è
function hideOpeningAnimation() {
    const openingArea = document.getElementById('opening-area');
    if (openingArea) {
        openingArea.style.display = 'none';
    }
}

// –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –ø—Ä–∏–∑–æ–º
function showPrizeModal(prize) {
    const modal = document.getElementById('prize-modal');
    if (!modal) return;

    // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–∑–∞
    const iconElement = document.getElementById('modal-prize-icon');
    const nameElement = document.getElementById('modal-prize-name');
    const descriptionElement = document.getElementById('modal-prize-description');

    if (iconElement) iconElement.textContent = getItemIcon(prize);
    if (nameElement) nameElement.textContent = prize.name;
    if (descriptionElement) descriptionElement.textContent = prize.description || '';

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    modal.style.display = 'flex';

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        modal.style.display = 'none';
    }, 3000);
}

// –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(message, type = 'info', duration = 3000) {
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    let container = document.getElementById('notifications-container');
    if (!container) {
        container = document.createElement('div');
        container.id = 'notifications-container';
        container.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 10000;
            pointer-events: none;
        `;
        document.body.appendChild(container);
    }

    // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.style.cssText = `
        background: ${getNotificationColor(type)};
        color: white;
        padding: 12px 20px;
        border-radius: 8px;
        margin-bottom: 10px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        transform: translateX(100%);
        transition: transform 0.3s ease;
        pointer-events: auto;
        max-width: 300px;
        word-wrap: break-word;
    `;

    notification.innerHTML = `
        <div style="display: flex; align-items: center; gap: 8px;">
            <span>${getNotificationIcon(type)}</span>
            <span>${message}</span>
        </div>
    `;

    container.appendChild(notification);

    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    setTimeout(() => {
        notification.style.transform = 'translateX(0)';
    }, 10);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
    setTimeout(() => {
        notification.style.transform = 'translateX(100%)';
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 300);
    }, duration);
}

function getNotificationColor(type) {
    const colors = {
        success: '#10B981',
        error: '#EF4444',
        warning: '#F59E0B',
        info: '#3B82F6'
    };
    return colors[type] || colors.info;
}

function getNotificationIcon(type) {
    const icons = {
        success: '‚úÖ',
        error: '‚ùå',
        warning: '‚ö†Ô∏è',
        info: '‚ÑπÔ∏è'
    };
    return icons[type] || icons.info;
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–∞–±–æ–≤
    document.querySelectorAll('.tab-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
            const tab = e.target.dataset.tab;
            switchTab(tab);
        });
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–µ–π—Å–æ–≤
    document.querySelectorAll('.case-item').forEach(item => {
        item.addEventListener('click', (e) => {
            const caseType = e.currentTarget.dataset.case;
            const price = parseInt(e.currentTarget.dataset.price);
            openCase(caseType, price);
        });
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥
    document.querySelectorAll('.buy-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
            const amount = parseInt(e.target.dataset.amount);
            buyStars(amount);
        });
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async function initApp() {
    try {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Mini App...');

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
        if (tg) {
            tg.ready();
            tg.expand();
            console.log('‚úÖ Telegram WebApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await getUserData();

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI
        updateStarsDisplay();
        updateInventoryDisplay();
        switchTab('cases');
        setupEventListeners();

        console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        showNotification('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', 'error');
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', initApp);

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
window.openCase = openCase;
window.buyStars = buyStars;
window.switchTab = switchTab;
